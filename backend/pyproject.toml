[project]
name = "Backend"
version = "0.1.0"
description = "Backend project demonstrating Hexagonal Architecture, CQRS, and Bundle-Contexts with FastAPI."
authors = [
    { name = "Andy J. Del Aguila", email = "jackdelaguilavilla03@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10,<4.0"

dependencies = [
    "fastapi>=0.113.0,<1.0.0",
    "uvicorn[standard]>=0.30.3,<1.0.0",
    "sqlalchemy[asyncio]>=2.0.33,<3.0.0",
    "asyncpg>=0.29.0,<1.0.0",
    "pydantic[email]>=2.9.1,<3.0.0",
    "pydantic-settings>=2.4.2,<3.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "aio-pika>=9.4.1,<10.0.0",
    "tenacity>=8.5.0,<9.0.0",
    "python-multipart>=0.0.9,<1.0.0"
]

[tool.poetry]
packages = [
    { include = "app" },
    { include = "core" },
    { include = "contexts" },
]

[tool.poetry.group.dev.dependencies]
# Development dependencies
pytest = "^8.3.2"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
httpx = "^0.27.0"
factory-boy = "^3.3.0"
faker = "^26.1.0"
freezegun = "^1.5.1"
mypy = "^1.11.1"
ruff = "^0.6.4"
pre-commit = "^3.8.0"
alembic = "^1.13.2"

[build-system]
# Build system configuration
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# Pytest configuration
asyncio_mode = "auto"
pythonpath = [".", "src"] # Add src if you structure code under src/
testpaths = ["tests"]
# Add markers if needed: e.g., @pytest.mark.integration

[tool.coverage.run]
# Coverage configuration
source = ["contextflow"] # Adjust if your main code is under src/
omit = [
    "contextflow/app/main.py", # Example: Exclude main entry point if trivial
    "contextflow/app/config.py", # Example: Settings loading often doesn't need coverage
    "*/__init__.py",
    "*/tests/*",
    "*/migrations/*", # Exclude migration files
    "contextflow/core/database.py", # Example: DB session/engine setup might be excluded
]

[tool.coverage.report]
# Coverage report settings
fail_under = 80 # Enforce minimum coverage
show_missing = true

[tool.mypy]
# MyPy type-checking configuration
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Can be set to false for stricter checks if all libs have types
disallow_untyped_defs = true
check_untyped_defs = true
exclude = ['venv', 'build', 'dist', 'tests/factories'] # Exclude factories if they cause type issues

[tool.ruff]
# Ruff linter configuration
line-length = 88

[tool.ruff.format]
# Formatting rules
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Linting rules
select = ["E", "W", "F", "I", "C", "B"] # Select standard linter rules + isort + flake8-bugbear
ignore = ["E501"] # Ignore line length handled by formatter (or remove if line-length = 88 is desired)

[tool.ruff.lint.isort]
# Import sorting rules
known-first-party = ["app", "core", "contexts"]

[poetry.scripts]
# Custom scripts
dev = "uvicorn:main"
