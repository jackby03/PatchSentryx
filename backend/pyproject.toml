[tool.poetry]
# Project metadata
name = "Backend"
version = "0.1.0"
description = "Backend project demonstrating Hexagonal Architecture, CQRS, and Bundle-Contexts with FastAPI."
authors = ["Andy J. Del Aguila <jackdelaguilavilla03@gmail.com>"]
readme = "README.md"
packages = [
    { include = "app" },
    { include = "core" },
    { include = "contexts" },
]

[tool.poetry.dependencies]
# Application dependencies
python = "^3.10"
fastapi = "^0.113.0"
uvicorn = { extras = ["standard"], version = "^0.30.3" }
sqlalchemy = { extras = ["asyncio"], version = "^2.0.33" }
asyncpg = "^0.29.0" # Async PostgreSQL driver
pydantic = { extras = ["email"], version = "^2.9.1" }
pydantic-settings = "^2.4.2" # For loading settings from env vars/files
passlib = { extras = ["bcrypt"], version = "^1.7.4" } # For password hashing
python-jose = { extras = ["cryptography"], version = "^3.3.0" } # For JWT handling
aio-pika = "^9.4.1" # Async RabbitMQ client
tenacity = "^8.5.0" # For retries (e.g., connecting to RabbitMQ/DB)
python-multipart = "^0.0.9" # Required by FastAPI for form data

[tool.poetry.group.dev.dependencies]
# Development dependencies
pytest = "^8.3.2"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
httpx = "^0.27.0" # Async HTTP client for testing FastAPI endpoints
factory-boy = "^3.3.0" # For creating test data fixtures
faker = "^26.1.0" # For generating fake data
freezegun = "^1.5.1" # For controlling time in tests
mypy = "^1.11.1"
ruff = "^0.6.4"
pre-commit = "^3.8.0"
alembic = "^1.13.2" # If using Alembic for migrations

[build-system]
# Build system configuration
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# Pytest configuration
asyncio_mode = "auto"
pythonpath = [".", "src"] # Add src if you structure code under src/
testpaths = ["tests"]
# Add markers if needed: e.g., @pytest.mark.integration

[tool.coverage.run]
# Coverage configuration
source = ["contextflow"] # Adjust if your main code is under src/
omit = [
    "contextflow/app/main.py", # Example: Exclude main entry point if trivial
    "contextflow/app/config.py", # Example: Settings loading often doesn't need coverage
    "*/__init__.py",
    "*/tests/*",
    "*/migrations/*", # Exclude migration files
    "contextflow/core/database.py", # Example: DB session/engine setup might be excluded
]

[tool.coverage.report]
# Coverage report settings
fail_under = 80 # Enforce minimum coverage
show_missing = true

[tool.mypy]
# MyPy type-checking configuration
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Can be set to false for stricter checks if all libs have types
disallow_untyped_defs = true
check_untyped_defs = true
exclude = ['venv', 'build', 'dist', 'tests/factories'] # Exclude factories if they cause type issues

[tool.ruff]
# Ruff linter configuration
line-length = 88

[tool.ruff.format]
# Formatting rules
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Linting rules
select = ["E", "W", "F", "I", "C", "B"] # Select standard linter rules + isort + flake8-bugbear
ignore = ["E501"] # Ignore line length handled by formatter (or remove if line-length = 88 is desired)

[tool.ruff.lint.isort]
# Import sorting rules
known-first-party = ["app", "core", "contexts"]

[tool.poetry.scripts]
# Custom scripts
dev = "uvicorn:main"
